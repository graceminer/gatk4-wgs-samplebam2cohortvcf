{"version": null, "code": "gAMoQxJ0AGQBfA58EWQCjQMBAGQAUwBxAChYBQAAAGlucHV0cQFYBgAAAG91dHB1dHECWAYAAABwYXJhbXNxA1gJAAAAd2lsZGNhcmRzcQRYBwAAAHRocmVhZHNxBVgJAAAAcmVzb3VyY2VzcQZYAwAAAGxvZ3EHWAcAAAB2ZXJzaW9ucQhYBAAAAHJ1bGVxCVgJAAAAY29uZGFfZW52cQpYDQAAAGNvbnRhaW5lcl9pbWdxC1gQAAAAc2luZ3VsYXJpdHlfYXJnc3EMWA8AAAB1c2Vfc2luZ3VsYXJpdHlxDVgLAAAAZW52X21vZHVsZXNxDlgMAAAAYmVuY2hfcmVjb3JkcQ9YBQAAAGpvYmlkcRBYCAAAAGlzX3NoZWxscRFYDwAAAGJlbmNoX2l0ZXJhdGlvbnESWA8AAABjbGVhbnVwX3NjcmlwdHNxE1gKAAAAc2hhZG93X2RpcnEUWA0AAABlZGl0X25vdGVib29rcRV0cRZdcRcoTlhmDgAACiAgICAgICAgbW9kdWxlIGxvYWQgUi8zLjUuMyBqYXZhLzEuOC4wXzIxMSBweXRob24vMy43LjMgcGljYXJkLzIuMjIuMyB2ZXJpZnlCYW1JRC8yMDE0LTAyLTEzCiAgICAgICAgIyMjIENyZWF0ZVNlcXVlbmNlR3JvdXBpbmdUU1YgKGZpbGUgdXNlZCB0byBncmVhdGUgc2VxdWVuY2UgZ3JvdXBpbmdzIHVzZXMgaW4gQlFTUiBhbmQgUHJpbnRSZWFkcyBTY2F0dGVyKQogICAgICAgIHB5dGhvbjMgPDxDT0RFCndpdGggb3Blbigie1JFRl9ESUNUfSIsICJyIikgYXMgcmVmX2RpY3RfZmlsZToKICAgIHNlcXVlbmNlX3R1cGxlX2xpc3QgPSBbXQogICAgbG9uZ2VzdF9zZXF1ZW5jZSA9IDAKICAgIGZvciBsaW5lIGluIHJlZl9kaWN0X2ZpbGU6CiAgICAgICAgaWYgbGluZS5zdGFydHN3aXRoKCJAU1EiKToKICAgICAgICAgICAgbGluZV9zcGxpdCA9IGxpbmUuc3BsaXQoIgkiKQogICAgICAgICAgICAjIChTZXF1ZW5jZV9OYW1lLCBTZXF1ZW5jZV9MZW5ndGgpCiAgICAgICAgICAgIHNlcXVlbmNlX3R1cGxlX2xpc3QuYXBwZW5kKChsaW5lX3NwbGl0WzFdLnNwbGl0KCJTTjoiKVsxXSwgaW50KGxpbmVfc3BsaXRbMl0uc3BsaXQoIkxOOiIpWzFdKSkpCiAgICBsb25nZXN0X3NlcXVlbmNlID0gc29ydGVkKHNlcXVlbmNlX3R1cGxlX2xpc3QsIGtleT1sYW1iZGEgeDogeFsxXSwgcmV2ZXJzZT1UcnVlKVswXVsxXQojIFdlIGFyZSBhZGRpbmcgdGhpcyB0byB0aGUgaW50ZXJ2YWxzIGJlY2F1c2UgaGczOCBoYXMgY29udGlncyBuYW1lZCB3aXRoIGVtYmVkZGVkIGNvbG9ucyBhbmQgYSBidWcgaW4gR0FUSyBzdHJpcHMgb2ZmCiMgdGhlIGxhc3QgZWxlbWVudCBhZnRlciBhIDosIHNvIHdlIGFkZCB0aGlzIGFzIGEgc2FjcmlmaWNpYWwgZWxlbWVudC4KaGczOF9wcm90ZWN0aW9uX3RhZyA9ICI6MSsiCiMgaW5pdGlhbGl6ZSB0aGUgdHN2IHN0cmluZyB3aXRoIHRoZSBmaXJzdCBzZXF1ZW5jZQp0c3Zfc3RyaW5nID0gc2VxdWVuY2VfdHVwbGVfbGlzdFswXVswXSArIGhnMzhfcHJvdGVjdGlvbl90YWcKdGVtcF9zaXplID0gc2VxdWVuY2VfdHVwbGVfbGlzdFswXVsxXQpmb3Igc2VxdWVuY2VfdHVwbGUgaW4gc2VxdWVuY2VfdHVwbGVfbGlzdFsxOl06CiAgICBpZiB0ZW1wX3NpemUgKyBzZXF1ZW5jZV90dXBsZVsxXSA8PSBsb25nZXN0X3NlcXVlbmNlOgogICAgICAgIHRlbXBfc2l6ZSArPSBzZXF1ZW5jZV90dXBsZVsxXQogICAgICAgIHRzdl9zdHJpbmcgKz0gJycnCicnJyArIHNlcXVlbmNlX3R1cGxlWzBdICsgaGczOF9wcm90ZWN0aW9uX3RhZwogICAgZWxzZToKICAgICAgICB0c3Zfc3RyaW5nICs9ICcnJwonJycgKyBzZXF1ZW5jZV90dXBsZVswXSArIGhnMzhfcHJvdGVjdGlvbl90YWcKICAgICAgICB0ZW1wX3NpemUgPSBzZXF1ZW5jZV90dXBsZVsxXQojIGFkZCB0aGUgdW5tYXBwZWQgc2VxdWVuY2VzIGFzIGEgc2VwYXJhdGUgbGluZSB0byBlbnN1cmUgdGhhdCB0aGV5IGFyZSByZWNhbGlicmF0ZWQgYXMgd2VsbAojIHdpdGggb3Blbigic2VxdWVuY2VfZ3JvdXBpbmcudHh0IiwidyIpIGFzIHRzdl9maWxlOgp3aXRoIG9wZW4oIntvdXRwdXQuc2d9IiwidyIpIGFzIHRzdl9maWxlOgogICAgdHN2X2ZpbGUud3JpdGUodHN2X3N0cmluZykKICAgIHRzdl9maWxlLmNsb3NlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKdHN2X3N0cmluZyArPSAnJycKJycnICsgInVubWFwcGVkIgoKIyB3aXRoIG9wZW4oInNlcXVlbmNlX2dyb3VwaW5nX3dpdGhfdW5tYXBwZWQudHh0IiwidyIpIGFzIHRzdl9maWxlX3dpdGhfdW5tYXBwZWQ6CndpdGggb3Blbigie291dHB1dC5zZ191bm1hcHBlZH0iLCJ3IikgYXMgdHN2X2ZpbGVfd2l0aF91bm1hcHBlZDoKICAgIHRzdl9maWxlX3dpdGhfdW5tYXBwZWQud3JpdGUodHN2X3N0cmluZykKICAgIHRzdl9maWxlX3dpdGhfdW5tYXBwZWQuY2xvc2UoKQpDT0RFCiAgICAgICAgbWtkaXIgLXAgaW5wdXQvaW50ZXJ2YWxzL3NlcXVlbmNlX2dyb3VwaW5nX25ld2xpbmUvCiAgICAgICAgbWtkaXIgLXAgaW5wdXQvaW50ZXJ2YWxzL3NlcXVlbmNlX2dyb3VwaW5nX3VubWFwcGVkX25ld2xpbmUvCiAgICAgICAgCiAgICAgICAgaGVhZCAtMjUge291dHB1dC5zZ30gfCBzcGxpdCAtLWxpbmVzPTEgLS1udW1lcmljLXN1ZmZpeGVzIC0tYWRkaXRpb25hbC1zdWZmaXg9Ii5saXN0IiAtIGlucHV0L2ludGVydmFscy9zZXF1ZW5jZV9ncm91cGluZ19uZXdsaW5lL3NlcXVlbmNlX2dyb3VwaW5nXwogICAgICAgIHNlZCAtbiAnL2Nock06MSsvLCRwJyB7b3V0cHV0LnNnfSB8IHNlZCAnMWQnICA+IGlucHV0L2ludGVydmFscy9zZXF1ZW5jZV9ncm91cGluZ19uZXdsaW5lL3NlcXVlbmNlX2dyb3VwaW5nXzI1Lmxpc3QKICAgICAgICAKICAgICAgICBoZWFkIC0yNSB7b3V0cHV0LnNnX3VubWFwcGVkfSB8IHNwbGl0IC0tbGluZXM9MSAtLW51bWVyaWMtc3VmZml4ZXMgLS1hZGRpdGlvbmFsLXN1ZmZpeD0iLmxpc3QiIC0gaW5wdXQvaW50ZXJ2YWxzL3NlcXVlbmNlX2dyb3VwaW5nX3VubWFwcGVkX25ld2xpbmUvc2VxdWVuY2VfZ3JvdXBpbmcudW5tYXBwZWRfCiAgICAgICAgc2VkIC1uICcvY2hyTToxKy8sJHAnIHtvdXRwdXQuc2dfdW5tYXBwZWR9IHwgc2VkICcxZCcgPiBpbnB1dC9pbnRlcnZhbHMvc2VxdWVuY2VfZ3JvdXBpbmdfdW5tYXBwZWRfbmV3bGluZS9zZXF1ZW5jZV9ncm91cGluZy51bm1hcHBlZF8yNS5saXN0CgoJI2hlYWQgLTI1IGlucHV0L2ludGVydmFscy9zZXF1ZW5jZV9ncm91cGluZy50c3YgfCBzcGxpdCAtLWxpbmVzPTEgLS1udW1lcmljLXN1ZmZpeGVzPTEgLS1hZGRpdGlvbmFsLXN1ZmZpeD0iLmxpc3QiIC0gaW5wdXQvaW50ZXJ2YWxzL3NlcXVlbmNlX2dyb3VwaW5nX25ld2xpbmUvc2VxdWVuY2VfZ3JvdXBpbmdfCiAgICAgICAgI3NlZCAtbiAnL2Nock06MSsvLCRwJyAgaW5wdXQvaW50ZXJ2YWxzL3NlcXVlbmNlX2dyb3VwaW5nLnRzdiB8IHNlZCAnMWQnID4gaW5wdXQvaW50ZXJ2YWxzL3NlcXVlbmNlX2dyb3VwaW5nX25ld2xpbmUvc2VxdWVuY2VfZ3JvdXBpbmdfMDAubGlzdAkKCiAgICAgICAgI3NwbGl0IC0tbGluZXM9MSAtLW51bWVyaWMtc3VmZml4ZXM9MSAtLWFkZGl0aW9uYWwtc3VmZml4PSIubGlzdCIgaW5wdXQvaW50ZXJ2YWxzL3RlbXBfY2hyMjUudHN2IGlucHV0L2ludGVydmFscy9zZXF1ZW5jZV9ncm91cGluZ19uZXdsaW5lL3NlcXVlbmNlX2dyb3VwaW5nXwogICAgICAgICNzcGxpdCAtLWxpbmVzPTEgLS1udW1lcmljLXN1ZmZpeGVzPTEgLS1hZGRpdGlvbmFsLXN1ZmZpeD0iLmxpc3QiIGlucHV0L2ludGVydmFscy90ZW1wX2NocjI1X3VubWFwcGVkLnRzdiBpbnB1dC9pbnRlcnZhbHMvc2VxdWVuY2VfZ3JvdXBpbmdfdW5tYXBwZWRfbmV3bGluZS9zZXF1ZW5jZV9ncm91cGluZy51bm1hcHBlZF8KCiAgICAgICAgI3NwbGl0IC0tbGluZXM9MSAtZCAtLWFkZGl0aW9uYWwtc3VmZml4PSIubGlzdCIge291dHB1dC5zZ30gaW5wdXQvaW50ZXJ2YWxzL3NlcXVlbmNlX2dyb3VwaW5nX25ld2xpbmUvc2VxdWVuY2VfZ3JvdXBpbmdfIAogICAgICAgICNzcGxpdCAtLWxpbmVzPTEgLWQgLS1hZGRpdGlvbmFsLXN1ZmZpeD0iLmxpc3QiIHtvdXRwdXQuc2dfdW5tYXBwZWR9ICBpbnB1dC9pbnRlcnZhbHMvc2VxdWVuY2VfZ3JvdXBpbmdfdW5tYXBwZWRfbmV3bGluZS9zZXF1ZW5jZV9ncm91cGluZy51bm1hcHBlZF8KICAgICAgICBxGGgPaBKGcRllWAUAAABzaGVsbHEahXEbdHEcLg==", "rule": "create_sequence_grouping_newline", "input": ["/sc/arion/projects/MMAAAS/src/gatk-resources/hg38_20201116/hg38/v0/resources-broad-hg38-v0-Homo_sapiens_assembly38.dict"], "log": [], "params": [], "shellcmd": "\n        module load R/3.5.3 java/1.8.0_211 python/3.7.3 picard/2.22.3 verifyBamID/2014-02-13\n        ### CreateSequenceGroupingTSV (file used to greate sequence groupings uses in BQSR and PrintReads Scatter)\n        python3 <<CODE\nwith open(\"/sc/arion/projects/MMAAAS/src/gatk-resources/hg38_20201116/hg38/v0/resources-broad-hg38-v0-Homo_sapiens_assembly38.dict\", \"r\") as ref_dict_file:\n    sequence_tuple_list = []\n    longest_sequence = 0\n    for line in ref_dict_file:\n        if line.startswith(\"@SQ\"):\n            line_split = line.split(\"\t\")\n            # (Sequence_Name, Sequence_Length)\n            sequence_tuple_list.append((line_split[1].split(\"SN:\")[1], int(line_split[2].split(\"LN:\")[1])))\n    longest_sequence = sorted(sequence_tuple_list, key=lambda x: x[1], reverse=True)[0][1]\n# We are adding this to the intervals because hg38 has contigs named with embedded colons and a bug in GATK strips off\n# the last element after a :, so we add this as a sacrificial element.\nhg38_protection_tag = \":1+\"\n# initialize the tsv string with the first sequence\ntsv_string = sequence_tuple_list[0][0] + hg38_protection_tag\ntemp_size = sequence_tuple_list[0][1]\nfor sequence_tuple in sequence_tuple_list[1:]:\n    if temp_size + sequence_tuple[1] <= longest_sequence:\n        temp_size += sequence_tuple[1]\n        tsv_string += '''\n''' + sequence_tuple[0] + hg38_protection_tag\n    else:\n        tsv_string += '''\n''' + sequence_tuple[0] + hg38_protection_tag\n        temp_size = sequence_tuple[1]\n# add the unmapped sequences as a separate line to ensure that they are recalibrated as well\n# with open(\"sequence_grouping.txt\",\"w\") as tsv_file:\nwith open(\"input/intervals/sequence_grouping.tsv\",\"w\") as tsv_file:\n    tsv_file.write(tsv_string)\n    tsv_file.close()\n                                   \ntsv_string += '''\n''' + \"unmapped\"\n\n# with open(\"sequence_grouping_with_unmapped.txt\",\"w\") as tsv_file_with_unmapped:\nwith open(\"input/intervals/sequence_grouping.unmapped.tsv\",\"w\") as tsv_file_with_unmapped:\n    tsv_file_with_unmapped.write(tsv_string)\n    tsv_file_with_unmapped.close()\nCODE\n        mkdir -p input/intervals/sequence_grouping_newline/\n        mkdir -p input/intervals/sequence_grouping_unmapped_newline/\n        \n        head -25 input/intervals/sequence_grouping.tsv | split --lines=1 --numeric-suffixes --additional-suffix=\".list\" - input/intervals/sequence_grouping_newline/sequence_grouping_\n        sed -n '/chrM:1+/,$p' input/intervals/sequence_grouping.tsv | sed '1d'  > input/intervals/sequence_grouping_newline/sequence_grouping_25.list\n        \n        head -25 input/intervals/sequence_grouping.unmapped.tsv | split --lines=1 --numeric-suffixes --additional-suffix=\".list\" - input/intervals/sequence_grouping_unmapped_newline/sequence_grouping.unmapped_\n        sed -n '/chrM:1+/,$p' input/intervals/sequence_grouping.unmapped.tsv | sed '1d' > input/intervals/sequence_grouping_unmapped_newline/sequence_grouping.unmapped_25.list\n\n\t#head -25 input/intervals/sequence_grouping.tsv | split --lines=1 --numeric-suffixes=1 --additional-suffix=\".list\" - input/intervals/sequence_grouping_newline/sequence_grouping_\n        #sed -n '/chrM:1+/,$p'  input/intervals/sequence_grouping.tsv | sed '1d' > input/intervals/sequence_grouping_newline/sequence_grouping_00.list\t\n\n        #split --lines=1 --numeric-suffixes=1 --additional-suffix=\".list\" input/intervals/temp_chr25.tsv input/intervals/sequence_grouping_newline/sequence_grouping_\n        #split --lines=1 --numeric-suffixes=1 --additional-suffix=\".list\" input/intervals/temp_chr25_unmapped.tsv input/intervals/sequence_grouping_unmapped_newline/sequence_grouping.unmapped_\n\n        #split --lines=1 -d --additional-suffix=\".list\" input/intervals/sequence_grouping.tsv input/intervals/sequence_grouping_newline/sequence_grouping_ \n        #split --lines=1 -d --additional-suffix=\".list\" input/intervals/sequence_grouping.unmapped.tsv  input/intervals/sequence_grouping_unmapped_newline/sequence_grouping.unmapped_\n        ", "incomplete": false, "starttime": 1642614580.574471, "endtime": 1642614583.057921, "job_hash": -9223363271477270714, "conda_env": null, "container_img_url": null}