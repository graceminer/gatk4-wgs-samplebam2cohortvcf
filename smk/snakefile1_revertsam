configfile: "config.yaml"

REF_DICT=config["REF_DICT"]


SNPEFF = config["SNPEFF"]
SNPSIFT = config["SNPSIFT"]
#GNOMAD = config["GNOMAD"]
MAGMA = config["MAGMA"]
#SNPSIFT_FILTER_IMPACT = config["SNPSIFT_FILTER_IMPACT"]
SNPSIFT_FILTER_IMPACT_TWO="(((ANN[0].IMPACT = 'HIGH') | (ANN[0].IMPACT = 'MODERATE')) & !(ANN[0].EFFECT = 'sequence_feature'))"
SNPSIFT_FILTER_BIOTYPE_PROTEIN_CODING = "(ANN[0].BIOTYPE = 'protein_coding')"
DATE=20201204
PHENO_COVARS_ALL = "output/modules/pca_final/pheno_covars_all"
GENOME = config["GENOME"]
NAME = "1096013095.final.bam"
UBAM = ["A","B","C"] #,"D", "E" ,"F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U"]
CHROMOSOMES = range(1, 23) # ["all"]
#PATH1 = os.getcwd()

#SAMPLES, = glob_wildcards("/sc/arion/projects/MMAAAS/ngs_res/gatk20200105/input/{samples}.final.bam")
SAMPLES, = glob_wildcards("input/{samples}.final.bam")

#RGS, = glob_wildcards("output/{wildcards.samples}/{rgs}.bam")
#RGS, = glob_wildcards("output/{wildcards.samples}/{wildcards.samples}_{rgs}.bam")
wildcard_constraints:
    chr="\d+"
localrules: #bam2ubam
#ruleorder: revertsam > sortsam    

rule main:
    input:
        expand("input/{sample}.final.bam", sample=SAMPLES),
	expand("output/split_rg/{sample}/", sample=SAMPLES),
        #expand("output/{sample}/{sample}_{rg}.bam", sample=SAMPLES,rg=RGS),
	#expand("output/{sample}/{sample}_{rg}.unmapped.bam", sample=SAMPLES,rg=RGS)
        #expand("input/intervals/sequence_grouping/sequence_grouping.tsv"),
        #expand("input/intervals/sequence_grouping_unmapped/sequence_grouping.unmapped.tsv"),
        expand("input/intervals/sequence_grouping.tsv"),
        expand("input/intervals/sequence_grouping.unmapped.tsv"),


rule revertsam:
    input: "input/{sample}.final.bam"
    output: directory("output/split_rg/{sample}/")
    #output: "output/{sample}/{sample}_{rg}.bam"
    shell:
        """
        module load java/1.8.0_211  python/3.7.3 gatk/4.2.0.0
        

        gatk --java-options "-Xmx1g" \
  	    RevertSam \
	    --INPUT {input} \
	    --OUTPUT {output} \
            --OUTPUT_BY_READGROUP true \
            --VALIDATION_STRINGENCY LENIENT \
            --ATTRIBUTE_TO_CLEAR FT \
            --ATTRIBUTE_TO_CLEAR CO \
            --SORT_ORDER coordinate
	touch {output}
        module unload java/1.8.0_211  python/3.7.3 singularity/3.2.1
        """

#rule create_sequence_grouping:
#    input: "/sc/arion/projects/MMAAAS/src/gatk-resources/hg38_20201116/hg38/v0/resources-broad-hg38-v0-Homo_sapiens_assembly38.dict"
#    output: sg="input/intervals/sequence_grouping/sequence_grouping.tsv",sg_unmapped="input/intervals/sequence_grouping_unmapped/sequence_grouping.unmapped.tsv"
#    shell:
#        """
#        module load R/3.5.3 java/1.8.0_211 python/3.7.3 picard/2.22.3 verifyBamID/2014-02-13
#        ### CreateSequenceGroupingTSV (file used to greate sequence groupings uses in BQSR and PrintReads Scatter)
#        python3 <<CODE
#with open("{REF_DICT}", "r") as ref_dict_file:
#    sequence_tuple_list = []
#    longest_sequence = 0
#    for line in ref_dict_file:
#        if line.startswith("@SQ"):
#            line_split = line.split("\t")
#            # (Sequence_Name, Sequence_Length)
#            sequence_tuple_list.append((line_split[1].split("SN:")[1], int(line_split[2].split("LN:")[1])))
#    longest_sequence = sorted(sequence_tuple_list, key=lambda x: x[1], reverse=True)[0][1]
## We are adding this to the intervals because hg38 has contigs named with embedded colons and a bug in GATK strips off
## the last element after a :, so we add this as a sacrificial element.
#hg38_protection_tag = ":1+"
## initialize the tsv string with the first sequence
#tsv_string = sequence_tuple_list[0][0] + hg38_protection_tag
#temp_size = sequence_tuple_list[0][1]
#for sequence_tuple in sequence_tuple_list[1:]:
#    if temp_size + sequence_tuple[1] <= longest_sequence:
#        temp_size += sequence_tuple[1]
#        tsv_string += "\t" + sequence_tuple[0] + hg38_protection_tag
#    else:
#        tsv_string += '''\n''' + sequence_tuple[0] + hg38_protection_tag
#        temp_size = sequence_tuple[1]
## add the unmapped sequences as a separate line to ensure that they are recalibrated as well
## with open("sequence_grouping.txt","w") as tsv_file:
#with open("{output.sg}","w") as tsv_file:
#    tsv_file.write(tsv_string)
#    tsv_file.close()
#                                   
#tsv_string += '''\n''' + "unmapped"

## with open("sequence_grouping_with_unmapped.txt","w") as tsv_file_with_unmapped:
#with open("{output.sg_unmapped}","w") as tsv_file_with_unmapped:
#    tsv_file_with_unmapped.write(tsv_string)
#    tsv_file_with_unmapped.close()
#CODE
#        split --lines=1 -d --additional-suffix=".list" {output.sg} input/intervals/sequence_grouping/sequence_grouping_ 
#        split --lines=1 -d --additional-suffix=".list" {output.sg_unmapped}  input/intervals/sequence_grouping_unmapped/sequence_grouping.unmapped_
#        """

rule create_sequence_grouping_newline:
    input: "/sc/arion/projects/MMAAAS/src/gatk-resources/hg38_20201116/hg38/v0/resources-broad-hg38-v0-Homo_sapiens_assembly38.dict"
    output: sg="input/intervals/sequence_grouping.tsv",sg_unmapped="input/intervals/sequence_grouping.unmapped.tsv"
    shell:
        """
        module load R/3.5.3 java/1.8.0_211 python/3.7.3 picard/2.22.3 verifyBamID/2014-02-13
        ### CreateSequenceGroupingTSV (file used to greate sequence groupings uses in BQSR and PrintReads Scatter)
        python3 <<CODE
with open("{REF_DICT}", "r") as ref_dict_file:
    sequence_tuple_list = []
    longest_sequence = 0
    for line in ref_dict_file:
        if line.startswith("@SQ"):
            line_split = line.split("\t")
            # (Sequence_Name, Sequence_Length)
            sequence_tuple_list.append((line_split[1].split("SN:")[1], int(line_split[2].split("LN:")[1])))
    longest_sequence = sorted(sequence_tuple_list, key=lambda x: x[1], reverse=True)[0][1]
# We are adding this to the intervals because hg38 has contigs named with embedded colons and a bug in GATK strips off
# the last element after a :, so we add this as a sacrificial element.
hg38_protection_tag = ":1+"
# initialize the tsv string with the first sequence
tsv_string = sequence_tuple_list[0][0] + hg38_protection_tag
temp_size = sequence_tuple_list[0][1]
for sequence_tuple in sequence_tuple_list[1:]:
    if temp_size + sequence_tuple[1] <= longest_sequence:
        temp_size += sequence_tuple[1]
        tsv_string += '''\n''' + sequence_tuple[0] + hg38_protection_tag
    else:
        tsv_string += '''\n''' + sequence_tuple[0] + hg38_protection_tag
        temp_size = sequence_tuple[1]
# add the unmapped sequences as a separate line to ensure that they are recalibrated as well
# with open("sequence_grouping.txt","w") as tsv_file:
with open("{output.sg}","w") as tsv_file:
    tsv_file.write(tsv_string)
    tsv_file.close()
                                   
tsv_string += '''\n''' + "unmapped"

# with open("sequence_grouping_with_unmapped.txt","w") as tsv_file_with_unmapped:
with open("{output.sg_unmapped}","w") as tsv_file_with_unmapped:
    tsv_file_with_unmapped.write(tsv_string)
    tsv_file_with_unmapped.close()
CODE
        mkdir -p input/intervals/sequence_grouping_newline/
        mkdir -p input/intervals/sequence_grouping_unmapped_newline/
        
        head -25 {output.sg} | split --lines=1 --numeric-suffixes=1 --additional-suffix=".list" - input/intervals/sequence_grouping_newline/sequence_grouping_
        sed -n '/chrM:1+/,$p' {output.sg} | sed '1d'  > input/intervals/sequence_grouping_newline/sequence_grouping_00.list
        
        head -25 {output.sg_unmapped} | split --lines=1 --numeric-suffixes=1 --additional-suffix=".list" - input/intervals/sequence_grouping_unmapped_newline/sequence_grouping.unmapped_
        sed -n '/chrM:1+/,$p' {output.sg_unmapped} | sed '1d' > input/intervals/sequence_grouping_unmapped_newline/sequence_grouping.unmapped_00.list

	#head -25 input/intervals/sequence_grouping.tsv | split --lines=1 --numeric-suffixes=1 --additional-suffix=".list" - input/intervals/sequence_grouping_newline/sequence_grouping_
        #sed -n '/chrM:1+/,$p'  input/intervals/sequence_grouping.tsv | sed '1d' > input/intervals/sequence_grouping_newline/sequence_grouping_00.list	

        #split --lines=1 --numeric-suffixes=1 --additional-suffix=".list" input/intervals/temp_chr25.tsv input/intervals/sequence_grouping_newline/sequence_grouping_
        #split --lines=1 --numeric-suffixes=1 --additional-suffix=".list" input/intervals/temp_chr25_unmapped.tsv input/intervals/sequence_grouping_unmapped_newline/sequence_grouping.unmapped_

        #split --lines=1 -d --additional-suffix=".list" {output.sg} input/intervals/sequence_grouping_newline/sequence_grouping_ 
        #split --lines=1 -d --additional-suffix=".list" {output.sg_unmapped}  input/intervals/sequence_grouping_unmapped_newline/sequence_grouping.unmapped_
        """        

#rule sortsam:
#    input: "output/{sample}/{sample}_{rg}.bam"
#    #input: rules.revertsam.output
#    #input: lambda wildcards: [os.path.join(SAMPLES[i], x + '.bam') for i,x in enumerate(RGS) if x == wildcards.rgs]
#    output: "output/{sample}/{sample}_{rg}.unmapped.bam"
#    shell:
#        """
#        module load java/1.8.0_211  python/3.7.3 singularity/3.2.1 gatk/4.1.7.0
#        
#	gatk --java-options "-Xmx3g" \
#        SortSam \
#            --INPUT {input} \
#            --OUTPUT {output} \
#            --SORT_ORDER queryname \
#            --MAX_RECORDS_IN_RAM 1000000
#
#        module unload java/1.8.0_211  python/3.7.3 singularity/3.2.1 gatk/4.1.7.0
#        """

   
