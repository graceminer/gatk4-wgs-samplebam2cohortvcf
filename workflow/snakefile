configfile: "config/config.yaml"
# Singularity with conda wrappers

#singularity: "docker://continuumio/miniconda3:4.5.11"
from snakemake.utils import min_version

min_version("5.4")

import glob
import os

AXIOMPOLY_RESOURCE_VCF=config["AXIOMPOLY_RESOURCE_VCF"]
BATCH_SIZE=config["BATCH_SIZE"]
BREAK_BANDS_AT_MULTIPLES_OF=config["BREAK_BANDS_AT_MULTIPLES_OF"]
BWA_VERSION = config["BWA_VERSION"]
CALLING_INTERVAL_LIST=config["CALLING_INTERVAL_LIST"]
CALLSET_NAME=config["CALLSET_NAME"]
COMPRESSION_LEVEL=config["COMPRESSION_LEVEL"]
CONTAMINATION_SITES_PREFIX=config["CONTAMINATION_SITES_PREFIX"]
CONTAMINATION_UNDERESTIMATION_FACTOR=config["CONTAMINATION_UNDERESTIMATION_FACTOR"]
CROSSCHECK_BY=config["CROSSCHECK_BY"]
DBSNP_VCF=config["DBSNP_VCF"]
EVALUATION_INTERVAL_LIST=config["EVALUATION_INTERVAL_LIST"]
EXCESS_HET_THRESHOLD=config["EXCESS_HET_THRESHOLD"]
GENOTYPES_FINGERPRINT_FILE=config["GENOTYPES_FINGERPRINT_FILE"]
HAPLOTYPE_DATABASE_FILE=config["HAPLOTYPE_DATABASE_FILE"]
HAPLOTYPE_SCATTER_COUNT=config["HAPLOTYPE_SCATTER_COUNT"]
HAPMAP_RESOURCE_VCF=config["HAPMAP_RESOURCE_VCF"]
INDEL_FILTER_LEVEL=config["INDEL_FILTER_LEVEL"]
INDEL_MAX_GAUSSIANS=config["INDEL_MAX_GAUSSIANS"]
INDEL_RECALIBRATION_ANNOTATION_VALUES=config["INDEL_RECALIBRATION_ANNOTATION_VALUES"]
INDEL_RECALIBRATION_TRANCHE_VALUES=config["INDEL_RECALIBRATION_TRANCHE_VALUES"]
KNOWN_SITES_HOMOSAPIENS=config["KNOWN_SITES_HOMOSAPIENS"]
KNOWN_SITES_MILLS1000G=config["KNOWN_SITES_MILLS1000G"]
LOD_THRESHOLD=config["LOD_THRESHOLD"]
MAX_CHIMERISM_IN_REASONABLE_SAMPLE=config["MAX_CHIMERISM_IN_REASONABLE_SAMPLE"]
MAX_DUPLICATION_IN_REASONABLE_SAMPLE=config["MAX_DUPLICATION_IN_REASONABLE_SAMPLE"]
OMNI_RESOURCE_VCF=config["OMNI_RESOURCE_VCF"]
ONE_THOUSAND_GENOMES_RESOURCE_VCF=config["ONE_THOUSAND_GENOMES_RESOURCE_VCF"]
READ_LENGTH=config["READ_LENGTH"]
REF_DICT=config["REF_DICT"]
REF_FASTA = config["REF_FASTA"]
SAMPLE_NAME=config["SAMPLE_NAME"]
SAMPLE_NUM_THRESHOLD=config["SAMPLE_NUM_THRESHOLD"]
SCATTER_MODE=config["SCATTER_MODE"]
SNP_FILTER_LEVEL=config["SNP_FILTER_LEVEL"]
SNP_MAX_GAUSSIANS=config["SNP_MAX_GAUSSIANS"]
SNP_RECALIBRATION_ANNOTATION_VALUES=config["SNP_RECALIBRATION_ANNOTATION_VALUES"]
SNP_RECALIBRATION_TRANCHE_VALUES=config["SNP_RECALIBRATION_TRANCHE_VALUES"]
UNBOUNDED_SCATTER_COUNT_SCALE_FACTOR=config["UNBOUNDED_SCATTER_COUNT_SCALE_FACTOR"]
UNPADDED_INTERVAL_FILE=config["UNPADDED_INTERVAL_FILE"]
VerifyBamID = config["VerifyBamID"]
WGS_COVERAGE_INTERVAL_LIST=config["WGS_COVERAGE_INTERVAL_LIST"]

#########################################################################################################################
localrules: all, bqsr_intervalreport_aggregate, haplotypecaller_intervals_aggregate,genotyping_intervals_aggregate,recal_intervals_aggregate

SAMPLES, = glob_wildcards("input/{sample}.final.bam")

rule all:
    input:
        expand("output/sorted_bam/{sample}/{sample}.aligned.duplicates_marked.sorted.preBqsr.selfSM", zip, sample=SAMPLES),
        expand("output/final_bam/{sample}.final_bam.collect_aggregated_metrics.{metrics}", sample=SAMPLES, metrics=["alignment_summary_metrics","bait_bias_detail_metrics","bait_bias_summary_metrics","gc_bias.detail_metrics","gc_bias.pdf","gc_bias.summary_metrics","insert_size_histogram.pdf","insert_size_metrics","pre_adapter_detail_metrics", "pre_adapter_summary_metrics","quality_distribution.pdf","quality_distribution_metrics", "error_summary_metrics"]),
        expand("output/final_bam/{sample}.final_bam.collect_rg_metrics.{metrics}", sample=SAMPLES, metrics=["alignment_summary_metrics","gc_bias.detail_metrics","gc_bias.pdf","gc_bias.summary_metrics"]),
        expand("output/final_bam/{sample}.final_bam.{ext}", sample=SAMPLES,ext=["duplication.csv","chimerism.csv","fingerprinting_detail_metrics","fingerprinting_summary_metrics","read_group_md5","wgs_metrics","raw_wgs_metrics"]),
        expand("output/final_cram/{sample}.final_cram.{ext}", sample=SAMPLES, ext=["validation_report"]),
        expand("output/merge_gvcf_metrics/{sample}.g.vcf.variant_calling_summary_metrics", sample=SAMPLES),
        expand("output/merge_gvcf_metrics/{sample}.validate_gvcf.metrics", sample=SAMPLES),
        expand("output/merge_gvcf_metrics/{sample}.g.vcf.variant_calling_detail_metrics", sample=SAMPLES),
        "output/merge_gvcf_metrics/" + CALLSET_NAME + ".check_unique.gvcf.txt",
	"output/final_vcf_metrics/" + CALLSET_NAME + ".cohort.variant_calling_detail_metrics",
        "output/final_vcf_metrics/" + CALLSET_NAME + ".cohort.variant_calling_summary_metrics",
        "output/final_vcf_metrics/" + CALLSET_NAME + ".cohort.fingerprintcheck"


include: "rules/samplebam2sampleubam.smk"
include: "rules/sampleubam2samplegvcf.smk"
include: "rules/samplegvcf2cohortvcf.smk"
