configfile: "config.yaml"
import glob
import os

REF_FASTA = config["REF_FASTA"]
#[minerg01@li03c03 ~]$ ml bwa/0.7.8
#[minerg01@li03c03 ~]$ BWA_VERSION=$(bwa 2>&1 |     grep -e '^Version' |     sed 's/Version: //')
#[minerg01@li03c03 ~]$ echo $BWA_VERSION
#0.7.8-r455
#BWA_VERSION = "0.7.8-r455"
#COMPRESSION_LEVEL=2   

## cross check fingerprints (on the aligned.duplicates_marked.sorted.bam)
#LOD_THRESHOLD=-20.0
#CROSSCHECK_BY="READGROUP"
#HAPLOTYPE_DATABASE_FILE="/sc/arion/projects/MMAAAS/src/gatk-resources/hg38_20201116/hg38/v0/references-hg38-v0-Homo_sapiens_assembly38.haplotype_database.txt"

## check contamination
#CONTAMINATION_SITES_UD="/sc/arion/projects/MMAAAS/src/gatk-resources/hg38_20201116/hg38/v0/references-hg38-v0-Homo_sapiens_assembly38.contam.UD"
#CONTAMINATION_SITES_BED="/sc/arion/projects/MMAAAS/src/gatk-resources/hg38_20201116/hg38/v0/references-hg38-v0-Homo_sapiens_assembly38.contam.bed"
#CONTAMINATION_SITES_MU="/sc/arion/projects/MMAAAS/src/gatk-resources/hg38_20201116/hg38/v0/references-hg38-v0-Homo_sapiens_assembly38.contam.mu"
#CONTAMINATION_UNDERESTIMATION_FACTOR=0.75
#CONTAMINATION_SITES_PREFIX="/sc/arion/projects/MMAAAS/src/gatk-resources/hg38_20201116/hg38/v0/references-hg38-v0-Homo_sapiens_assembly38.contam"
#VerifyBamID = config["VerifyBamID"]

# base_recalibration_report
#REF_DICT=config["REF_DICT"]
#DBSNP_VCF=config["DBSNP_VCF"]

#known_indels_sites_vcfs
#KNOWN_SITES_MILLS1000G="/sc/arion/projects/MMAAAS/src/gatk-resources/hg38_20201116/hg38/v0/resources-broad-hg38-v0-Mills_and_1000G_gold_standard.indels.hg38.vcf.gz"
#KNOWN_SITES_HOMOSAPIENS="/sc/arion/projects/MMAAAS/src/gatk-resources/hg38_20201116/hg38/v0/resources-broad-hg38-v0-Homo_sapiens_assembly38.known_indels.vcf.gz"

# bqsr
#GENOTYPES_FINGERPRINT_FILE="/sc/arion/projects/MMAAAS/src/gatk-resources/hg38_20201116/hg38/v0/NA12878_NA12878.hg38.reference.fingerprint.vcf"
#SAMPLE_NAME="NA12878"
# check pre validation
#MAX_DUPLICATION_IN_REASONABLE_SAMPLE = 0.30
#MAX_CHIMERISM_IN_REASONABLE_SAMPLE = 0.15

# wgs metrics
#WGS_COVERAGE_INTERVAL_LIST="/sc/arion/projects/MMAAAS/src/gatk-resources/hg38_20201116/hg38/v0/intervals_wgs_coverage_regions.hg38.interval_list"
#READ_LENGTH=250




(SAMPLE,RG) = glob_wildcards("output/split_rg/{sample}/{rg}.bam")
#INTERVALS, = glob_wildcards("input/intervals/sequence_grouping_unmapped_newline/sequence_grouping.unmapped_{interval}.list")
INTERVALS = sorted(glob.glob("input/scatter_interval_list/*/*.interval_list"))
    
wildcard_constraints:
    chr="\d+"
    
localrules: main
#default combinatorial function is product, which can be replaced with other functions in this case "zip()" to create a tuple so that expand doesnt create all combos of sample and rg which ends up swapping sample dirs and rg and producing all possible cobinations as opposed to sampleA/sampleA_rg_bam

rule main:
    input:

rule gatk4_haplotype_caller:
    input: rules.gather_recal_bams.output  
    output: "output/"
    benchmark: "benchmarks/"
    shell:
        """
        module load R/3.5.3  gatk/4.2.0.0 java/1.8.0_211 python/3.7.3 picard/2.22.3

        set -e
        gatk --java-options "-Xms6000m -XX:GCTimeLimit=50 -XX:GCHeapFreeLimit=10" \
          HaplotypeCaller \
          -R {REF_FASTA} \
          -I {input_bam} \
          -L {interval_list} \
          -O ~{output_file_name} \
          -contamination=0 \
          -G StandardAnnotation -G StandardHCAnnotation -G AS_StandardAnnotation \
          -new-qual \
          -GQB 10 -GQB 20 -GQB 30 -GQB 40 -GQB 50 -GQB 60 -GQB 70 -GQB 80 -GQB 90 \
          -ERC GVCF 
        """

# rule:
#     input: rules.gather_recal_bams.output  
#     output: "output/"
#     benchmark: "benchmarks/"
#     shell:
#         """
#         module load R/3.5.3  gatk/4.2.0.0 java/1.8.0_211 python/3.7.3 picard/2.22.3
#         """



##################################################################################################################                                                                                                                                                                                                                                                                                                                                         
